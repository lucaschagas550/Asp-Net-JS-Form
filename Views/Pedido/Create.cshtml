@model PedidoViewModel

@{
    ViewData["Title"] = "Criar Pedido";
}

<vc:error-summary></vc:error-summary>

<!-- Modal para Adicionar Item -->
<div class="modal fade" id="itemModal" tabindex="-1" role="dialog" aria-labelledby="itemModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Adicionar Item</h1>
                <button id="closeModalButton" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        onclick="limparValoresModal('itemModal')"></button>
            </div>
            <div class="modal-body">

                <div class="form-group">
                    <label for="itemDescricao">Descrição</label>
                    <input type="text" class="form-control" id="itemDescricao" />
                    <div class="text-danger" id="itemDescricaoError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="itemQuantidade">Quantidade</label>
                    <input type="number" class="form-control" id="itemQuantidade" />
                    <div class="text-danger" id="itemQuantidadeError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="itemPreco">Preço</label>
                    <input class="form-control money" id="itemPreco" />
                    <div class="text-danger" id="itemPrecoError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="itemData">Data</label>
                    <input class="form-control date-field" type="date" id="itemData" />
                    <div class="text-danger" id="itemDataError" style="display:none;"></div>
                </div>

                <div class="form-check">
                    <label class="form-check-label" for="itemDesconto">Desconto</label>
                    <input class="form-check-input" type="checkbox" id="itemDesconto" />
                    <div class="text-danger" id="itemDataDescontoError" style="display:none;"></div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="limparValoresModal('itemModal')">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveItemButton">Salvar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Editar Item -->
<div class="modal fade" id="editItemModal" tabindex="-1" role="dialog" aria-labelledby="editItemModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Editar Item</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">

                <div class="form-group">
                    <label for="editItemDescricao">Descrição</label>
                    <input type="text" class="form-control" id="editItemDescricao" />
                    <div class="text-danger" id="editItemDescricaoError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="editItemQuantidade">Quantidade</label>
                    <input type="number" class="form-control" id="editItemQuantidade" />
                    <div class="text-danger" id="editItemQuantidadeError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="editItemPreco">Preço</label>
                    <input class="form-control money" id="editItemPreco" />
                    <div class="text-danger" id="editItemPrecoError" style="display:none;"></div>
                </div>

                <div class="form-group">
                    <label for="editItemData">Data</label>
                    <input class="form-control date-field" type="date" id="editItemData" />
                    <div class="text-danger" id="editItemDataError" style="display:none;"></div>
                </div>

                <div class="form-check">
                    <label class="form-check-label" for="editItemDesconto">Desconto</label>
                    <input class="form-check-input" type="checkbox" id="editItemDesconto" />
                    <div class="text-danger" id="editItemDescontoError" style="display:none;"></div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateButton">Atualizar</button>
                <!--Sem a mensagem de confirmacao apenas basta add o id => id="updateItemButton"-->
            </div>
        </div>
    </div>
</div>

<!--Modal Edicao Confirmacao-->
<div class="modal" tabindex="-1" id="editConfirmacao" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Atenção</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Deseja Alterar o item?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#editItemModal">Close</button>
                <button type="button" class="btn btn-primary" id="updateItemButton">Save changes</button>
            </div>
        </div>
    </div>
</div>

<h1>@ViewData["Title"] </h1>

<form asp-action="Create" method="post">
    <div>
        <div class="mb-3">
            <div class="form-group">
                <label for="NomeCliente">Cliente</label>
                <input id="NomeCliente" name="Cliente.NomeCliente" value="@Model.Cliente.NomeCliente" class="form-control" />
            </div>
            <div class="form-group">
                <label for="DataPedido">Data do Pedido</label>
                <input id="DataPedido" name="Cliente.DataPedido" value="@Model.Cliente.DataPedido.ToString("yyyy-MM-dd")" type="date" class="form-control" />
            </div>

            <div class="mt-5">
                <div class="row">
                    <div class="col-sm-6 text-start">
                        <h3>Itens</h3>
                    </div>
                    <div class="col-sm-6 text-end">
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#itemModal">
                            Adicionar Item
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table text-center table-bordered">
                <thead>
                    <tr>
                        <th>Descrição</th>
                        <th>Quantidade</th>
                        <th>Preço </th>
                        <th>Data</th>
                        <th>Desconto</th>
                        <th>Ações</th>
                    </tr>
                </thead>
                <!--Id da tabela eh usado para JS acrescentar,editar ou remover os itens, alling-middle todo conteudo alinahdo verticalmente-->
                <tbody id="itens-table" class="align-middle">
                    @for (int i = 0; i < Model.Itens.Count; i++)
                    {
                        @*""Itens"" porque na model eh referente a lista, assim existe o mapeamento*@
                        <tr>
                            <td class="max-width-450">
                                <div class="descricao">@Model.Itens[i].Descricao</div>
                                <input name="Itens[@i].Descricao" value="@Model.Itens[i].Descricao" class="readonly-input-center" hidden="hidden" />
                            </td>
                            <td class="max-width-450">
                                <div class="quantidade">@Model.Itens[i].Quantidade</div>
                                <input name="Itens[@i].Quantidade" value="@Model.Itens[i].Quantidade" class="readonly-input-center" hidden="hidden" />
                            </td>
                            <td>
                                <div class="preco">R$ @Model.Itens[i].Preco.ToString("F2")</div>
                                <input type="text" name="Itens[@i].Preco" value="@Model.Itens[i].Preco" class="readonly-input" hidden="hidden" />
                            </td>
                            <td class="max-width-450">
                                @{
                                        <!--Valida se a data nao eh null se for nao mostra nada-->
                                    var formattedDate = Model.Itens[i].Data.HasValue ? Model.Itens[i].Data.Value.ToString("dd/MM/yyyy") : "";
                                }
                                <div class="data">@formattedDate</div>
                                <input name="Itens[@i].Data" value="@Model.Itens[i].Data?.ToString("yyyy-MM-dd")" type="date" class="readonly-input-center no-calendar" hidden="hidden" />
                            </td>
                            <td class="max-width-450">
                                <i class="fs-5 desconto-icon @(Model.Itens[i].Desconto ? "bi bi-check-circle" : "bi bi-x-circle")"></i>
                                <input name="Itens[@i].Desconto" type="checkbox" class="readonly-input" hidden="hidden"
                                       value="@(Model.Itens[@i].Desconto ? "true" : "false")" @(Model.Itens[i].Desconto ? "checked" : "") />
                            </td>
                            <td class="max-width-450">
                                <div>
                                    <button type="button" class="btn btn-warning me-2 mb-2" onclick="editItem(this)">Editar</button>
                                    <button type="button" class="btn btn-danger mb-2" onclick="removeItem(this)">Remover</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>


        <div class="row mt-4">
            <div class="col-sm-12 text-end">
                <button type="submit" class="btn btn-success">Salvar</button>
            </div>
        </div>
    </div>

    <!--Enviar lojas disponiveis como hidden somente ter os registros caso for necessario utilizar caso houver erros na requisicao, assim tera todas as informacoes necessarias-->
    @for (var i = 0; i < Model.Lojas.Count; i++)
    {
        <input name="Lojas[@i].Nome" value="@Model.Lojas[i].Nome" class="readonly-input-center" hidden="hidden" />
        <input name="Lojas[@i].Cep" value="@Model.Lojas[i].Cep" class="readonly-input-center" hidden="hidden" />
        <input name="Lojas[@i].Numero" value="@Model.Lojas[i].Numero" class="readonly-input-center" hidden="hidden" />
    }
</form>


@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>

        // Função para formatar a data no formato dd/MM/yyyy
        function formatDateToDDMMYYYY(dateString) {
            var dateParts = dateString.split("-");
            var year = parseInt(dateParts[0], 10);
            var month = parseInt(dateParts[1], 10) - 1; // Meses começam em 0
            var day = parseInt(dateParts[2], 10);

            var dateObj = new Date(year, month, day);

            return ('0' + dateObj.getDate()).slice(-2) + '/' +
                ('0' + (dateObj.getMonth() + 1)).slice(-2) + '/' +
                dateObj.getFullYear();
        }

        $(document).ready(function () {

            $('#confirmUpdateButton').click(function () {
                $('#editItemModal').modal('hide');
                $('#editConfirmacao').modal('show');
            });

            // Desabilita a digitação nos campos de data, permitindo apenas a seleção via calendário
            $('.date-field').on('keypress keydown keyup', function (e) {
                e.preventDefault();
            });


            //Remove o required do campo de data, permitindo que ele aceite nada, vulgo, null
            $('#itemData').prop('required', false);

            //Btn de add novo item na tabela
            $('#saveItemButton').click(function () {
                var descricao = $('#itemDescricao').val();
                var quantidade = $('#itemQuantidade').val();
                var preco = $('#itemPreco').val();
                var data = $('#itemData').val();
                var desconto = $('#itemDesconto').is(':checked'); // Verifica se o checkbox está marcado

                var isValid = true;

                if (!descricao) {
                    $('#itemDescricaoError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#itemDescricaoError').hide();
                }

                if (!quantidade) {
                    $('#itemQuantidadeError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#itemQuantidadeError').hide();
                }

                if (!preco) {
                    $('#itemPrecoError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#itemPrecoError').hide();
                }

                if (isValid) {
                    var index = $('#itens-table tr').length;
                    var formattedData = null;
                    var displayData = '';

                    //Valida se tem valor na data se nao tiver apenas nao mostra nada
                    if (data) {
                        formattedData = new Date(data).toISOString().split('T')[0];

                        // Formatação da data no formato dd/MM/yyyy
                        displayData = formatDateToDDMMYYYY(data);
                    }

                    //Definindo Icone para o checkbox se vai ser True check-circle ou false x-circle)
                    var descontoIconClass = desconto ? 'bi bi-check-circle' : 'bi bi-x-circle';

                    //Montagem da nova linha para a tabela
                    var row = '<tr>' +
                        '<td class="max-width-450">' +
                        '<div class="descricao">' + descricao + '</div>' +
                        '<input name="Itens[' + index + '].Descricao" class="readonly-input-center" value="' + descricao + '" hidden="hidden"/>' +
                        '</td>' +
                        '<td class="max-width-450">' +
                        '<div class="quantidade">' + quantidade + '</div>' +
                        '<input name="Itens[' + index + '].Quantidade" class="readonly-input-center" value="' + quantidade + '" hidden="hidden" />' +
                        '</td>' +
                        '<td class="max-width-450">' +
                        '<div class="preco"> R$ ' + preco + '</div>' +
                        '<input type="text" name="Itens[' + index + '].Preco" class="readonly-input" value="' + preco + '" hidden="hidden" />' +
                        '</td>' +
                        '<td class="max-width-450">' +
                        '<div class="data" >' + displayData + '</div>' +
                        '<input name="Itens[' + index + '].Data" type="date" class="readonly-input-center no-calendar" value="' + formattedData + '" hidden="hidden" />' +
                        '</td>' +
                        '<td class="max-width-450">' +
                        '<i class="fs-5 desconto-icon ' + descontoIconClass + '"></i>' +
                        '<input name="Itens[' + index + '].Desconto" type="checkbox" class="readonly-input checkbox-desconto" hidden="hidden" value="' + (desconto ? 'true' : 'false') + '" ' + (desconto ? 'checked' : '') + ' />' +
                        '</td>' +
                        '<td class="max-width-450">' +
                        '<div>' +
                        '<button type="button" class="btn btn-warning me-2 mb-2" onclick="editItem(this)">Editar</button>' +
                        '<button type="button" class="btn btn-danger mb-2" onclick="removeItem(this)">Remover</button>' +
                        '</div>' +
                        '</td>' +
                        '</tr>';

                    $('#itens-table').append(row);

                    // Fechar o modal
                    $('#closeModalButton').click();
                }
            });

            //Btn atualizar da Modal
            $('#updateItemButton').click(function () {
                var descricao = $('#editItemDescricao').val();
                var quantidade = $('#editItemQuantidade').val();
                var preco = $('#editItemPreco').val(); // Substitui vírgula por ponto para conversão
                var data = $('#editItemData').val();
                var desconto = $('#editItemDesconto').is(':checked');
                var displayData = '';

                var isValid = true;

                //Eh possivel realizar validacoes nos campos da modal quando clicado o botao de finalizar
                if (!descricao) {
                    $('#editItemDescricaoError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#editItemDescricaoError').hide();
                }

                if (!quantidade) {
                    $('#editItemQuantidadeError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#editItemQuantidadeError').hide();
                }

                if (!preco) {
                    $('#editItemPrecoError').text('Campo obrigatório.').show();
                    isValid = false;
                } else {
                    $('#editItemPrecoError').hide();
                }

                if (isValid) {
                    var row = $('#itens-table tr').eq(editingRowIndex);

                    //Valida se tem valor na data se nao tiver apenas nao mostra nada
                    if (data) {
                        // Formatação da data no formato dd/MM/yyyy
                        displayData = formatDateToDDMMYYYY(data);
                    }

                    //Atualiza os valores para os campos inputs que serao enviados para a controller
                    row.find('input[name$=".Descricao"]').val(descricao);
                    row.find('input[name$=".Quantidade"]').val(quantidade);
                    row.find('input[name$=".Preco"]').val(preco);
                    row.find('input[name$=".Data"]').val(data);
                    var checkbox = row.find('input[name$=".Desconto"]');

                    if (checkbox.length > 0) {
                        checkbox.prop('checked', desconto);
                        checkbox.val(desconto ? 'true' : 'false'); // Atualiza o valor do checkbox baseado no estado

                        var icon = row.find('.desconto-icon');
                        if (desconto) {
                            icon.removeClass('bi-x-circle').addClass('bi-check-circle');
                        } else {
                            icon.removeClass('bi-check-circle').addClass('bi-x-circle');
                        }
                    }

                    // Atualiza os valores nas divs visíveis na tabela
                    row.find('div.descricao').text(descricao);
                    row.find('div.quantidade').text(quantidade);
                    row.find('div.preco').text('R$ ' + preco);
                    row.find('div.data').text(displayData);

                    // Fechar o modal e remover o fundo ofuscado da edicao
                    // $('#editItemModal').modal('hide').on('hidden.bs.modal', function () {
                    //     $('body').removeClass('modal-open');
                    //     $('.modal-backdrop').remove();
                    // });

                    // Fechar o modal e remover o fundo ofuscado da confirmacao da edicao
                    $('#editConfirmacao').modal('hide').on('hidden.bs.modal', function () {
                        $('body').removeClass('modal-open');
                        $('.modal-backdrop').remove();
                    });
                }
            });
        });

        var editingRowIndex;

        //Btn de Editar, chamado ao clicar no botao da tabela para editar
        function editItem(button) {
            var row = $(button).closest('tr');
            editingRowIndex = row.index();

            //Pega o item da linha que tem o name terminando com .* (Alguma coisa exemplo .Data, .Preco, .Quantidade, .Desconto)
            $('#editItemDescricao').val(row.find('input[name$=".Descricao"]').val());
            $('#editItemQuantidade').val(row.find('input[name$=".Quantidade"]').val());

            // Formata o preço para o padrão brasileiro
            var preco = parseFloat(row.find('input[name$=".Preco"]').val()).toFixed(2);
            var precoFormatado = parseFloat(preco).toLocaleString('pt-BR', { minimumFractionDigits: 2, maximumFractionDigits: 2 });

            $('#editItemPreco').val(precoFormatado);
            $('#editItemData').val(row.find('input[name$=".Data"]').val());

            var checkbox = row.find('input[name$=".Desconto"]');
            if (checkbox.length > 0) {
                var isChecked = checkbox.is(':checked'); //Verifica se ele este checkado, true ou false
                console.log(isChecked);

                $('#editItemDesconto').prop('checked', isChecked); //Checkbox precisar alterar o valor da propriedade e nao setar o valor diretamente pelo Id do campo
            }

            $('#editItemModal').modal('show');
        }

        //Remove o item da tabela
        function removeItem(button) {
            $(button).closest('tr').remove();
            updateIndices();
        }

        // Atualiza índices da tabela para que o envio do formulário aconteça de forma correta apos remover um item
        function updateIndices() {
            $('#itens-table tr').each(function (index, row) {
                $(row).find('input').each(function () {
                    var name = $(this).attr('name');
                    if (name) {
                        var newName = name.replace(/\[\d+\]/, '[' + index + ']');
                        $(this).attr('name', newName);
                    }
                });
            });
        }


    </script>
}
