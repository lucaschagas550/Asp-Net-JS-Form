@model PedidoViewModel

@{
    ViewData["Title"] = "Criar Pedido";
}

<!--Mensagens de erros-->
<vc:error-summary></vc:error-summary>

<!--Todas modals utilizadas-->
<partial name="_pedidoModalInserir"></partial>
<partial name="_pedidoModalEditar"></partial>
<partial name="_pedidoModalRemover"></partial>
<!--Spinner de carregamento caso o envio demorar ele ser mostrado na tela-->
<partial name="_pedidoModalSpinner"></partial>

<h1>@ViewData["Title"] </h1>

<!--Formualrio de envio-->
@* clearSearchAndSubmit() so precisa se o botao estiver dentro do form *@
@* <form asp-action="Create" method="post" onsubmit="clearSearchAndSubmit()" id="mainForm"> *@
<form asp-action="Create" method="post" id="mainForm">

    <div class="accordion mt-5" id="accordionExample">

        <!--Accordions-->
        <!--Primeiro accordion de cliente-->
        <partial name="_pedidoCliente" model="Model"></partial>
        
        <!--Segundo accordion de pedido-->
        <partial name="_pedidoItens" model="Model"></partial>

    </div>

    <!--Enviar lojas disponiveis como hidden somente para ter os registros caso for necessario utilizar caso houver erros na requisicao, assim tera todas as informacoes necessarias-->
    @for (var i = 0; i < Model.Lojas.Count; i++)
    {
        <input name="Lojas[@i].Nome" value="@Model.Lojas[i].Nome" class="readonly-input-center" hidden="hidden" />
        <input name="Lojas[@i].Cep" value="@Model.Lojas[i].Cep" class="readonly-input-center" hidden="hidden" />
        <input name="Lojas[@i].Numero" value="@Model.Lojas[i].Numero" class="readonly-input-center" hidden="hidden" />
    }

</form>

<div class="row mt-5">
    <div class="col-sm-12 text-center">

        <button id="btnSaveCreate" class="btn btn-success">Salvar (Create)</button>
        <button id="btnSaveUpdate" class="btn btn-danger">Salvar (Update)</button>
        <button id="btnSaveDelete" class="btn btn-warning">Salvar (Delete)</button>

        @* <button type="submit" class="btn btn-success">Salvar</button>
        <button type="submit" class="btn btn-danger">Salvar</button>
        <button type="submit" class="btn btn-warning">Salvar</button>
        <button type="submit" class="btn btn-primary">Salvar</button> *@
    </div>
</div>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script src="~/js/Pedido/pedido.js"></script>
    <script src="~/js/Pedido/pedidoModalInserir.js"></script>
    <script src="~/js/Pedido/pedidoModalEditar.js"></script>
    <script src="~/js/Pedido/pedidoModalRemover.js"></script>
    <script src="~/js/Pedido/pedidoFooterBtns.js"></script>

    @*O razor so consegue pegar valores da Model para armazena em variavel se estiver no mesmo arquivo*@
    <script type="text/javascript">

        //Consigo usar sua variavel em outro arquivo JS o valorDaViewModel pode ser usado no pedidoModalEditar por exemplo
        var valorDaViewModel;

        $(document).ready(function () {
            valorDaViewModel = '@Model.Cliente.NomeCliente';
            // Agora você pode usar valorDaViewModel em seu script
            console.log(valorDaViewModel);
        });
    </script>
}
